* Zeker uit te leggen
	- Uitleggen CFG
	- Count down probleem
	- Gemaakte veronderstellingen die de gebruiker wilt
		-> Wil dat de kolomwaarden gebruikt worden
		-> Kan af en toe constanten verwachten 2*x + 1 bv
		-> Zoekt geen superlange vergelijkingen
		-> kolomwaardes kunnen meermaals of niet gebruikt worden
	- Geen gebruikersdata
		-> Dus zelf genereerd met verschillende randomgeneratoren
		-> Moeilijkheid vergelijking bepalen aan de hand van de gebruikte randomgenerator
	- Machine Learning by example
* Verhaallijn
	1. Aanhalen van gelijkaardige onderwerpen in de buurt van ons probleem (Countdown en FlashFill (Maybe!))
		-> Waarom is ons probleem verschillend van de reeds opgeloste problemen?
		-> Hoe kunnen we toch inspiratie halen uit deze oplossingen?
	2. Vergelijkingen zien als de taal bepaald door een CFG
		-> De bepaling van de CFG zorgt voor gemakkelijke aanpasbaarheid
		-> Hoe er uit deze CFG nu een boom kan opgesteld worden.
	3. Verkozen om de volledige boom op voorhand op te stellen
		-> Berekenen vraagt veel tijd op diepe niveaus
		-> Maar is dus zeker ook volledig
	4. Prunen van deze op voorhand berekende boom (Prunen op zelfde vergelijkingen)
		-> Minder knopen moeten doorlopen worden
		-> Maakt een groot verschil op diepe niveaus (Butterfly Effect)q
	5. Wat gebeurt er als we constanten toevoegen
		-> Er worden meer oplossingen gevonden (maar zijn deze ook wel nuttig?)
		-> Toename in de grote van de boom, maar ook toename in het aantal gevallen waar op zijn minst één oplossing gevonden wordt.
		-> Boom wordt breder, doorlopen van de boom wordt dus veel trager (sterk afhankelijk van welke gewichten worden toegevoegd)
	6. Welke constantes gaan we gebruiken
		-> 10, 5, prime -> Prime gekozen op basis van experimentele resultaten !!!(Een meer wetenschappelijke uitleg voor zoeken)
	7. Constanten berekenen adhv het gebruik van een onbekende
		-> Niet nuttig aangezien dan elke vergelijking een oplossing heeft. Maar dit worden oplossingen gebaseerd op constanten en niet op de kolomwaarden. Onze veronderstelling
	8. Niet meer berekenen boom op voorhand
		-> Praktisch raken we niet echt diep genoeg om de grote voordelen te plukken
		-> Er kan veel efficiënter gepruned (Prunen op Terminals) worden als we geen rekening moeten houden met de reeds bestaande boom
			-> Optimalisaties van de countdown probleem waren hier een grote hulp (Credit gegeven).
		-> Prunen op zelfde vergelijkingen wordt nog steeds doorgevoerd, nu wel op runtime, maar het tijdsverlies is beperkt
		-> Opgepast slechts 1 (losstaand) gewicht toegelaten!
	9. Haakjes toevoegen
		-> Meer in de lijn van wat de gebruiker zoekt
		-> Logischere aanpak
		-> sommige vergelijkingen kunnen op lagere diepte al gevonden worden (x + y)^2 bv diepte 3 ipv x^2 + 2*x*y + y^2 diepte 7
		-> Maar meer mogelijkheden op lagere diepte zorgen weer voor meer knopen en dus opties op latere niveaus.
	10. Slechts toelaten van 1 losstaand gewicht (Ik denk niet dat dit heel relevant gaat zijn.)
		-> TODO

* Expermimenten (onafhankelijk van het feit of brackets doorkomt of niet)
	!! Alle experimenten moeten worden uitgevoerd met de meest gebruikersrepresentatieve randomgenerator (of allemaal)
	- Vergelijken van de randomgeneratoren
		* Real Random
		* Complex random
		* Known Random
	- Prunen op vergelijkingen vs niet prunen op vergelijkingen		-> Maakt keuze prunen op vergelijkingen duidelijk
	- No Weights vs 10, 5, prime						-> Maakt keuze van prime weights duidelijk obv oplossingsgraad 
										   en keuze no weights op basis van snelheid
	- Prunen op basis van gewichten en vergelijkingen vs niet prunen
		- Voor no weights						-> Prunen mogelijk: op basis van vgl, op basis van K1 - K1 enzo
		- Voor prime weights						-> Alles van prunen no weights + prunen obv K1 + K1 enzo

* Nog te vermelden
	- GUI geschreven
	- Code beschikbaar via git
	- Basisapplicatie mogelijk via git

* Toekomst
	- Eventuele interne implementatie in Libre-/Openoffice of Microsoft Excel
	- Gebruik Constraintprogramming
		-> Niet bewandeld wegens te weinig kennis
	- Gebruik andere programmeertaal
		-> C++, Prolog, Haskell
		-> Niet bewandeld wegens te weinig kennis

